#summary Model View Presenter swing application

[http://code.google.com/p/pennychecker-presenter/wiki/GettingStarted GettingStarted]


= Details =

We create a simple user management. Users can be created, edited or deleted. In addition, all users are displayed in a list.

= Events =

We need two events. An event when a user's data have been changed and an event to announce that a new user to be created or edited.

{{{
public interface EditUserEventHandler extends EventHandler {
    void onEditUserEvent(EditUserEvent event);
}

public final class EditUserEvent extends Event<EditUserEventHandler> {

    public final static Type<EditUserEventHandler> TYPE = new Type<EditUserEventHandler>();

    @Override
    public Type<EditUserEventHandler> getAssociatedType() {
        return TYPE;
    }

    @Override
    protected void dispatch(EditUserEventHandler h) {
        h.onEditUserEvent(this);
    }
}
}}}

{{{
public interface UserChangedEventHandler extends EventHandler {
    void onUserChangedEvent(UserChangedEvent event);
}

public final class UserChangedEvent extends Event<UserChangedEventHandler> {

    public final static Type<UserChangedEventHandler> TYPE = new Type<UserChangedEventHandler>();

    @Override
    public Type<UserChangedEventHandler> getAssociatedType() {
        return TYPE;
    }

    @Override
    protected void dispatch(UserChangedEventHandler h) {
        h.onUserChangedEvent(this);
    }
}
}}}

= Presenter =

We need a presenter for the processing of a user.

{{{
/**
 *
 * @author Steffen Kämpke
 */
public final class EditUserPresenter extends SwingPresenter<EditUserPresenter.Display> {

    private User selectedUser;
    private final UserRepository userRepository;

    /**
     * 
     * @param display
     * @param eventBus
     * @param userRepository  
     */
    @Inject
    public EditUserPresenter(Display display, EventBus eventBus, UserRepository userRepository) {
        super(display, eventBus);
        assert null != userRepository;
        this.userRepository = userRepository;
        bind();
    }

    @Override
    protected void onBind() {

        registerHandler(eventBus.addHandler(EditUserEvent.TYPE, new EditUserEventHandler() {

            public void onEditUserEvent(EditUserEvent event) {
                selectedUser = event.getUser();

                if (null == selectedUser) {
                    display.clearForm();
                } else {
                    display.setUser(selectedUser);
                }

                eventBus.fireEvent(new PresenterRevealedEvent(EditUserPresenter.this));
            }
        }));

        display.getSaveButton().addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                saveUser();
            }
        });

        display.getCloseButton().addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                display.clearForm();
                eventBus.fireEvent(new UserChangedEvent(null));
            }
        });
    }

    @Override
    protected void onUnbind() {
    }

    public void refreshDisplay() {
    }

    public interface Display extends SwingDisplay {

        JButton getSaveButton();

        JButton getCloseButton();

        String getFirstname();

        String getLastName();

        public void setErrorMessage(String string);

        public void clearForm();

        public void setUser(User user);

        public void setWarningMessage(String string);
    }

    private void saveUser() {
        assert null != display.getFirstname();
        assert null != display.getLastName();
        final String firstname = display.getFirstname();
        final String lastname = display.getLastName();

        if (firstname.isEmpty()) {
            display.setWarningMessage("Please insert the firstname.");
            return;
        }

        if (lastname.isEmpty()) {
            display.setWarningMessage("Please insert the lastname.");
            return;
        }
        final User user;

        if (null == selectedUser) {
            user = new User(firstname, lastname);
        } else {
            user = selectedUser;
            user.setFirstname(firstname);
            user.setLastname(lastname);
        }
        try {
            userRepository.save(user);
        } catch (Exception ex) {
            Logger.getLogger(EditUserPresenter.class.getName()).log(Level.SEVERE, null, ex);
            display.setErrorMessage("Could not save the user.");
            return;
        }


        selectedUser = null;
        display.clearForm();

        eventBus.fireEvent(new UserChangedEvent(user));
    }
}
}}}

To display all users, we need a presenter.

{{{
/**
 *
 * @author Steffen Kämpke
 */
public final class AllUserPresenter extends SwingPresenter<AllUserPresenter.Display> {

    private final List<User> users = new ArrayList<User>();
    private User selectedUser;
    private final UserRepository userRepository;

    /**
     * 
     * @param display
     * @param eventBus
     * @param userRepository 
     */
    @Inject
    public AllUserPresenter(Display display, EventBus eventBus, UserRepository userRepository) {
        super(display, eventBus);
        assert null != userRepository;
        this.userRepository = userRepository;
        bind();
        fetchUsers();
    }

    @Override
    protected void onBind() {

        display.getUserList().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int index = display.getSelectedUserIndex();
                if (index < 0) {
                    return;
                }
                selectedUser = users.get(index);
                display.setSelectedUser(selectedUser);
            }
        });

        display.getUserList().addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int index = display.getSelectedUserIndex();
                    if (index < 0) {
                        return;
                    }
                    final User selectedUser = users.get(index);
                    display.setSelectedUser(selectedUser);

                    eventBus.fireEvent(new EditUserEvent(selectedUser));
                }
            }
        });

        registerHandler(eventBus.addHandler(UserChangedEvent.TYPE, new UserChangedEventHandler() {

            public void onUserChangedEvent(UserChangedEvent event) {

                User user = event.getUser();

                if (null == user) {
                    firePresenterRevealedEvent();
                    return;
                }

                if (!users.contains(user)) {
                    users.add(user);
                }

                selectedUser = user;
                display.setSelectedUser(selectedUser);
                display.setUsers(users);
                display.setSelection(users.indexOf(user));
                firePresenterRevealedEvent();
            }
        }));


        display.getAddUserButton().addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                eventBus.fireEvent(new EditUserEvent(null));
            }
        });
        
        display.getEditUserButton().addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if ( null == selectedUser ) {
                    display.setWarning("Please select a user.");
                    return;
                }
                
                eventBus.fireEvent(new EditUserEvent(selectedUser));
            }
        });
        
        display.getRemoveUSerButton().addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                
                if ( null == selectedUser ) {
                    display.setWarning("Select a user.");
                    return;
                }
                users.remove(selectedUser);
                selectedUser = null;
                display.clearSelections();
                display.setUsers(users);
                display.setSelectedUser(selectedUser);
            }
        });
    }

    @Override
    protected void onUnbind() {
    }

    public void refreshDisplay() {
    }

    private void fetchUsers() {
        users.clear();
        final List<User> userList;
        try {
            userList = userRepository.finaAll();
        } catch (Exception ex) {
            display.setError("Could not fetch users.");
            return;
        }

        display.setUsers(userList);
        display.clearSelections();
    }

    public interface Display extends SwingDisplay {

        JList getUserList();

        JButton getAddUserButton();
        
        JButton getEditUserButton();
        
        JButton getRemoveUSerButton();

        public int getSelectedUserIndex();

        public void setSelectedUser(User selectedUser);

        public void setUsers(List<User> users);

        public void clearSelections();

        public void setSelection(int index);

        public void setWarning(String string);

        public void setError(String string);
    }

    public void firePresenterRevealedEvent() {
        eventBus.fireEvent(new PresenterRevealedEvent(AllUserPresenter.this));
    }
}
}}}

We need a container presenter. He can easily manage presenter. E.g. Views can be placed on a PresenterRevealedEvent for viewing.

{{{
/**
 *
 * @author Steffen Kämpke
 */
public class UserContainerPresenter extends SwingContainerPresenter<UserContainerPresenter.Display> {

    /**
     * 
     * @param display
     * @param eventBus
     * @param editUserPresenter
     * @param allUserPresenter 
     */
    @Inject
    public UserContainerPresenter(Display display, EventBus eventBus, EditUserPresenter editUserPresenter, AllUserPresenter allUserPresenter) {
        super(display, eventBus,editUserPresenter,allUserPresenter);

        assert null != editUserPresenter;
        assert null != editUserPresenter.getDisplay().asComponent().getName();

        assert null != allUserPresenter;
        assert null != allUserPresenter.getDisplay().asComponent().getName();
        
        display.addComponent(allUserPresenter.getDisplay().asComponent());
        display.addComponent(editUserPresenter.getDisplay().asComponent());
        
        showPresenter(allUserPresenter);
        bind();
    }

    public void refreshDisplay() {
    }

    public interface Display extends SwingContainerDisplay {
    }
}
}}}

= Views = 
For each presenter, we need a view. You can also encapsulates the logic for a view into multiple presenters.

All views implement their presenter display interfaces

View for the EditUserPresenter

{{{
/**
 *
 * @author Steffen Kämpke
 */
public class EditUserView extends javax.swing.JPanel implements EditUserPresenter.Display{
    private static final long serialVersionUID = 1L;

    /** Creates new form EditUserView */
    public EditUserView() {
        initComponents();
        this.setName("editUserView");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTextFieldFirstname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldLastname = new javax.swing.JTextField();
        jButtonSave = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        jTextFieldFirstname.setText("jTextField1");
        jTextFieldFirstname.setName("jTextFieldFirstname"); // NOI18N

        jLabel1.setText("Firstname");
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText("Lastname");
        jLabel2.setName("jLabel2"); // NOI18N

        jTextFieldLastname.setText("jTextField2");
        jTextFieldLastname.setName("jTextFieldLastname"); // NOI18N

        jButtonSave.setText("Save");
        jButtonSave.setName("jButtonSave"); // NOI18N

        jButtonCancel.setText("Cancel");
        jButtonCancel.setName("jButtonCancel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSave))
                    .addComponent(jTextFieldFirstname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldLastname, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldLastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextFieldFirstname;
    private javax.swing.JTextField jTextFieldLastname;
    // End of variables declaration                   

    public JButton getSaveButton() {
        return jButtonSave;
    }

    public JButton getCloseButton() {
        return jButtonCancel;
    }

    public String getFirstname() {
        return jTextFieldFirstname.getText();
    }

    public String getLastName() {
        return jTextFieldLastname.getText();
    }

    public void setErrorMessage(String string) {
        JOptionPane.showMessageDialog(this, string, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    public void setWarningMessage(String string) {
        JOptionPane.showMessageDialog(this, string, "Warning", JOptionPane.WARNING_MESSAGE);
    }

    public void clearForm() {
        jTextFieldFirstname.setText("");
        jTextFieldLastname.setText("");
    }

    public void setUser(User user) {
        jTextFieldFirstname.setText(user.getFirstname());
        jTextFieldLastname.setText(user.getLastname());
    }

    @Override
    public JComponent asComponent() {
        return this;
    }
}
}}}

View for AllUserPresenter

{{{
/**
 *
 * @author Steffen Kämpke
 */
public class AllUserView extends javax.swing.JPanel implements AllUserPresenter.Display {

    private static final long serialVersionUID = 1L;

    /** Creates new form AllUserView */
    public AllUserView() {
        initComponents();
        this.setName("allUserView");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelFirstname = new javax.swing.JLabel();
        jLabelLastname = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListUsers = new javax.swing.JList();
        jButtonEdit = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();

        jLabel1.setText("Firstname:");
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText("Lastname:");
        jLabel2.setName("jLabel2"); // NOI18N

        jLabelFirstname.setName("jLabelFirstname"); // NOI18N

        jLabelLastname.setName("jLabelLastname"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jListUsers.setName("jListUsers"); // NOI18N
        jScrollPane1.setViewportView(jListUsers);

        jButtonEdit.setText("Edit");
        jButtonEdit.setName("jButtonEdit"); // NOI18N

        jButtonRemove.setText("Remove");
        jButtonRemove.setName("jButtonRemove"); // NOI18N

        jButtonAdd.setText("Create");
        jButtonAdd.setName("jButtonAdd"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelFirstname, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelLastname, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelFirstname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabelLastname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRemove)
                    .addComponent(jButtonEdit)
                    .addComponent(jButtonAdd))
                .addContainerGap())
        );
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelFirstname;
    private javax.swing.JLabel jLabelLastname;
    private javax.swing.JList jListUsers;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration                   

    public JList getUserList() {
        return jListUsers;
    }

    public JButton getAddUserButton() {
        return jButtonAdd;
    }

    public int getSelectedUserIndex() {
        return jListUsers.getSelectedIndex();
    }

    public void setSelectedUser(User selectedUser) {

        if (null == selectedUser) {
            jLabelFirstname.setText("");
            jLabelLastname.setText("");
            return;
        }
        jLabelFirstname.setText(selectedUser.getFirstname());
        jLabelLastname.setText(selectedUser.getLastname());
    }

    public void setUsers(List<User> users) {
        final DefaultListModel model = new DefaultListModel();

        for (int i = 0; i < users.size(); i++) {
            final User user = users.get(i);
            model.add(i, user.getFirstname() + " " + user.getLastname());
        }

        jListUsers.setModel(model);
    }

    public void clearSelections() {
        jListUsers.clearSelection();
    }

    public void setSelection(int index) {
        jListUsers.setSelectedIndex(index);
    }

    public JButton getEditUserButton() {
        return jButtonEdit;
    }

    public JButton getRemoveUSerButton() {
        return jButtonRemove;
    }

    public void setError(String string) {
        JOptionPane.showMessageDialog(this, string, "Error", JOptionPane.ERROR_MESSAGE);
    }

    public void setWarning(String string) {
        JOptionPane.showMessageDialog(this, string, "Warning", JOptionPane.WARNING_MESSAGE);
    }

    public JComponent asComponent() {
        return this;
    }
}
}}}

View for the UserContainer presenter

{{{
public class UserContainerView extends javax.swing.JPanel implements UserContainerPresenter.Display{
    private static final long serialVersionUID = 1L;

    public UserContainerView() {
        initComponents();
    }

    @SuppressWarnings("unchecked")                    
    private void initComponents() {

        setLayout(new java.awt.CardLayout());
    }

    @Override
    public void showComponent(JComponent jc) {
        CardLayout cardLayout = (CardLayout) this.getLayout();
        cardLayout.show(this, jc.getName());
    }

    @Override
    public void addComponent(JComponent jc) {
        this.add(jc.getName(), jc);
    }

    @Override
    public void removeComponent(JComponent jc) {
        this.remove(jc);
    }

    @Override
    public JComponent asComponent() {
        return this;
    }                   
}
}}}

We still need a user.

{{{
public final class User {

    private String id;
    private String firstname;
    private String lastname;

    public User(String firstname, String lastname) {
        this.firstname = firstname;
        this.lastname = lastname;
    }

    public String getFirstname() {
        return firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final User other = (User) obj;
        if ((this.id == null) ? (other.id != null) : !this.id.equals(other.id)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 37 * hash + (this.id != null ? this.id.hashCode() : 0);
        return hash;
    }
}
}}}